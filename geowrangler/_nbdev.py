# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {
    "logger": "00_validation.ipynb",
    "SquareGridBoundary": "00_grids.ipynb",
    "SquareGridGenerator": "00_grids.ipynb",
    "SquareGridGenerator.create_cell": "00_grids.ipynb",
    "SquareGridGenerator.create_grid_for_polygon": "00_grids.ipynb",
    "SquareGridGenerator.generate_grid": "00_grids.ipynb",
    "H3GridGenerator": "00_grids.ipynb",
    "H3GridGenerator.get_hexes_for_polygon": "00_grids.ipynb",
    "H3GridGenerator.generate_grid": "00_grids.ipynb",
    "BingTileGridGenerator": "00_grids.ipynb",
    "BingTileGridGenerator.generate_grid": "00_grids.ipynb",
    "ValidationError": "00_validation.ipynb",
    "BaseValidator": "00_validation.ipynb",
    "BaseValidator.validate": "00_validation.ipynb",
    "OrientationValidator": "00_validation.ipynb",
    "OrientationValidator.check": "00_validation.ipynb",
    "OrientationValidator.fix": "00_validation.ipynb",
    "CrsBoundsValidator": "00_validation.ipynb",
    "CrsBoundsValidator.get_check_arguments": "00_validation.ipynb",
    "CrsBoundsValidator.check": "00_validation.ipynb",
    "CrsBoundsValidator.fix": "00_validation.ipynb",
    "SelfIntersectingValidator": "00_validation.ipynb",
    "SelfIntersectingValidator.check": "00_validation.ipynb",
    "SelfIntersectingValidator.fix": "00_validation.ipynb",
    "NullValidator": "00_validation.ipynb",
    "NullValidator.check": "00_validation.ipynb",
    "NullValidator.fix": "00_validation.ipynb",
    "AreaValidator": "00_validation.ipynb",
    "AreaValidator.check": "00_validation.ipynb",
    "AreaValidator.fix": "00_validation.ipynb",
    "GeometryValidation": "00_validation.ipynb",
    "GeometryValidation.validate_all": "00_validation.ipynb",
    "GEO_INDEX_NAME": "02_vector_zonal_stats.ipynb",
    "create_zonal_stats": "02_vector_zonal_stats.ipynb",
    "tms": "02_vector_zonal_stats.ipynb",
    "get_quadkey": "02_vector_zonal_stats.ipynb",
    "compute_quadkey": "02_vector_zonal_stats.ipynb",
    "validate_aoi_quadkey": "02_vector_zonal_stats.ipynb",
    "validate_data_quadkey": "02_vector_zonal_stats.ipynb",
    "quadkey_to_tile": "02_vector_zonal_stats.ipynb",
    "create_bingtile_zonal_stats": "02_vector_zonal_stats.ipynb",
    "create_raster_zonal_stats": "03_raster_zonal_stats.ipynb",
    "get_approximate_col_name": "04_dhs_data.ipynb",
    "generate_dhs_cluster_data": "04_dhs_data.ipynb",
    "PH_COLUMN_CONFIG": "04_dhs.ipynb",
    "KH_COLUMN_CONFIG": "04_dhs.ipynb",
    "MM_COLUMN_CONFIG": "04_dhs.ipynb",
    "TL_COLUMN_CONFIG": "04_dhs.ipynb",
    "COLUMN_CONFIG": "04_dhs.ipynb",
    "load_column_config": "04_dhs.ipynb",
    "load_dhs_file": "04_dhs.ipynb",
    "apply_threshold": "04_dhs.ipynb",
    "assign_wealth_index": "04_dhs.ipynb",
    "load_geofabrik_data": "05_datasets_geofabrik.ipynb",
    "list_geofabrik_regions": "05_datasets_geofabrik.ipynb",
    "download_geofabrik_region": "05_datasets_geofabrik.ipynb",
    "prep_aoi": "04_area_zonal_stats.ipynb",
    "extract_func": "04_area_zonal_stats.ipynb",
    "fix_area_agg": "04_area_zonal_stats.ipynb",
    "get_source_column": "04_area_zonal_stats.ipynb",
    "INTERSECT_AREA_AGG": "04_area_zonal_stats.ipynb",
    "build_agg_area_dicts": "04_area_zonal_stats.ipynb",
    "validate_area_aoi": "04_area_zonal_stats.ipynb",
    "validate_area_data": "04_area_zonal_stats.ipynb",
    "expand_area_aggs": "04_area_zonal_stats.ipynb",
    "compute_intersect_stats": "04_area_zonal_stats.ipynb",
    "compute_imputed_stats": "04_area_zonal_stats.ipynb",
    "create_area_zonal_stats": "04_area_zonal_stats.ipynb",
    "get_approximate_col_name": "04_dhs_data.ipynb",
    "generate_dhs_cluster_data": "04_dhs_data.ipynb",
}

modules = [
    "grids.py",
    "validation.py",
    "vector_zonal_stats.py",
    "raster_zonal_stats.py",
    "dhs.py",
    "datasets/geofabrik.py",
    "area_zonal_stats.py",
    "dhs.py",
]

doc_url = "https://geowrangler.web.app/"

git_url = "https://github.com/thinkingmachines/geowrangler/tree/master/"


def custom_doc_links(name):
    return None
